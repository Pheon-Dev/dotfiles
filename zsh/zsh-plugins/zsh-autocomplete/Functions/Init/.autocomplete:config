#!/bin/zsh
zmodload -Fa zsh/zutil b:zstyle

typeset -g ZLE_REMOVE_SUFFIX_CHARS=$' /;\n\r\t'
typeset -g ZLE_SPACE_SUFFIX_CHARS='|&<>-+'

builtin zstyle ':completion:*' file-list all

builtin zstyle ':completion:*' list-colors '=*=90'

builtin zstyle ':completion:*:director*' format $'%{\e[0;34m%}--  %d --'
builtin zstyle ':completion:*:options' format $'%{\e[0;36m%}--  %d --'
builtin zstyle ':completion:*:file*' format $'%{\e[0;33m%}--  %f --'
builtin zstyle ':completion:*:corrections' format $'%{\e[0;35m%}--  %e --'

builtin zstyle ':completion:*' use-cache yes
builtin zstyle -e ':completion:*' cache-path autocomplete:config:cache-path
autocomplete:config:cache-path() {
  reply=( "${XDG_CACHE_HOME:-$HOME/.cache}/zsh/compcache" )
}

builtin zstyle ':completion:*' completer _expand _complete _prefix _ignored _correct _approximate

builtin zstyle    ':completion:*:expand:*' tag-order '! expansions original' -
builtin zstyle    ':completion:*:expand:*' accept-exact continue
builtin zstyle -e ':completion:*:expand:*' glob _autocomplete__is_glob
builtin zstyle    ':completion:*:expand:*' keep-prefix no  # Needed for file type highlighting
builtin zstyle    ':completion:*:expand:*' add-space subst
builtin zstyle -e ':completion:*:expand:*' substitute autocomplete:config:substitute:expand
autocomplete:config:substitute:expand() {
  local -P __word__=$PREFIX$SUFFIX
  if [[ ${(Q)__word__} == *(\`*\`|\$\(*\))* ]]; then
    reply=( false )
  else
    reply=( true )
  fi
}


builtin zstyle -e ':completion:*:-command-:*' tag-order autocomplete:config:tag-order:command
autocomplete:config:tag-order:command() {
  if [[ $PREFIX == (|.|*/*) ]]; then
    reply=( 'suffix-aliases (|*-)directories executables (|*-)files' - )
  else
    reply=( aliases suffix-aliases functions 'reserved-words builtins' )
    if [[ -n $path[(r).] ]]; then
      reply+=( '(|*-)directories executables (|*-)files' commands )
    else
      reply+=( commands '(|*-)directories executables (|*-)files' )
    fi
  fi
}
builtin zstyle ':completion:*:-tilde-:*' tag-order directory-stack named-directories

builtin zstyle ':completion:*:(approximate|correct):*' tag-order '! original' -

# Complete options rather than directory stack. You can get directory stack by typing `~-` (tilde plus dash).
builtin zstyle ':completion:*:cd:*' complete-options yes
builtin zstyle ':completion:*:cd:*' tag-order '! directory-stack' -

# Don't show the giant list of history lines.
builtin zstyle ':completion:*:fc:*' tag-order options -

builtin zstyle ':completion:*:git-*:(|*-)argument-*:*' tag-order \
    '! (|cached-)files *-remote remote-* (|*-)tags' \
    '! *-remote remote-* tags'

# Order of matchers matters: m should come before r, which should come before l.
# Otherwise, the results are not as expected.
builtin zstyle ':completion:*' matcher-list \
    'm:{[:lower:]-}={[:upper:]_} r:|[.]=**' \
    '+l:|=*' \
    'm:{[:lower:]-}={[:upper:]_} r:|[.]=** l:?|=[-_\\ ] r:?||[-_]=*' \
    'm:{[:lower:]-}={[:upper:]_} r:|?=**'

builtin zstyle ':completion:*:options' matcher 'b:-=+'

builtin zstyle ':completion:*' prefix-needed yes
builtin zstyle ':completion:*:functions'  ignored-patterns '*.*' '*:*' '+*'
builtin zstyle ':completion:*:users'      ignored-patterns '_*'
builtin zstyle ':completion:*:widgets'    ignored-patterns '*.*' '*:*'
builtin zstyle ':completion:*' single-ignored ''

builtin zstyle ':completion:*:expand-alias:*' complete yes

# Complete only the tail of a path.
builtin zstyle ':completion:*' ignore-parents 'parent pwd directory'
builtin zstyle ':completion:*:paths' expand suffix
builtin zstyle ':completion:*:paths' list-suffixes yes
builtin zstyle ':completion:*:paths' path-completion no
builtin zstyle ':completion:*:paths' special-dirs no

builtin zstyle ':completion:*' group-name ''
builtin zstyle ':completion:*' group-order \
    all-expansions expansions options \
    aliases suffix-aliases functions reserved-words builtins commands \
    local-directories directories executables

builtin zstyle    ':completion:*'               file-patterns '*(-/):directories:directory %p(#q^-/):globbed-files'
builtin zstyle -e ':completion:*:-command-:*'   file-patterns autocomplete:config:file-patterns:command
autocomplete:config:file-patterns:command() {
  [[ $PREFIX$SUFFIX != */* ]] &&
      reply=( '*(-/):directories:directory ./*(-*^/):executables:"executable file"' )
}
builtin zstyle    ':completion:*:(.|source):*'  file-patterns \
    '%p(#q-/):directories:directory %p~*.zwc(-.^*):globbed-files' '%p~*.zwc(-^/):globbed-files'

# Don't combine parameters with same values.
builtin zstyle ':completion:*:parameters' list-grouped no

# builtin zstyle ':completion:*:descriptions'   format $'%{\e[0;1;2m%}%d%{\e[0m%}'
builtin zstyle ':completion:*:descriptions' format $'%{\e[0;32m%}--  %d --'
builtin zstyle -e ':completion:*:warnings'    format autocomplete:config:format:warnings
autocomplete:config:format:warnings() {
  [[ $CURRENT == 1 && -z $PREFIX$SUFFIX ]] ||
      reply=( $'%{\e[0;31m%}--   no matches found --' )
}
builtin zstyle ':completion:*:messages' format $'%{\e[0;37m%}--  %d --'
# builtin zstyle ':completion:*:messages'       format '%F{9}%d%f'
builtin zstyle ':completion:*:history-lines'  format ''

builtin zstyle ':completion:*' auto-description '%d'
builtin zstyle ':completion:*:parameters' extra-verbose yes
builtin zstyle ':completion:*:default' select-prompt '%F{black}%K{12}line %l %p%f%k'

builtin zstyle ':completion:*' insert-sections yes
builtin zstyle ':completion:*' separate-sections yes

# Needed for _gnu_generic to prevent descriptions from getting cropped.
is-at-least 5.9 ||
    builtin zstyle ':completion:*' command '- COLUMNS=999'

.autocomplete:config:precmd() {
  typeset -g _comp_setup="$_comp_setup"';
      [[ $_comp_caller_options[globdots] == yes ]] && setopt globdots'

  # Remove incompatible settings.
  local -P key= setting=
  for key in menu list-prompt; do
    for setting in ${(f)"$( zstyle -L '*' $key )"}; do
      eval "${setting/zstyle(| -e)/zstyle -d}"
    done
  done
  builtin zstyle ':completion:*:*:*:*:default' menu no no-select
  unset LISTPROMPT
}
# # bindkey -M menuselect '\r' .accept-line
# zstyle ':autocomplete:*' add-space \
#     executables aliases functions builtins reserved-words commands
# # zstyle ':autocomplete:*' default-context history-incremental-search-backward
# zstyle ':autocomplete:*' ignored-input '..##'
# # Autocompletion
# zstyle -e ':autocomplete:list-choices:*' list-lines 'reply=( $(( LINES / 3 )) )'
#
# # Override history search.
# zstyle ':autocomplete:history-incremental-search-backward:*' list-lines 8
#
# # History menu.
# # zstyle ':autocomplete:history-search-backward:*' list-lines 256
#
# # zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
#
# zstyle ':completion:*:approximate:'                 max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )' # allow one error for every three characters typed in approximate completer
# zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~' # don't complete backup files as executables
# # zstyle ':completion:*:corrections'                  format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}' #
# zstyle ':completion:*:*:cd:*:directory-stack'       menu yes select              # complete 'cd -<tab>' with menu
# zstyle ':completion:*:expand:*'                     tag-order all-expansions            # insert all expansions for expand completer
# zstyle ':completion:*:history-words'                list false                          #
# zstyle ':completion:*:history-words'                menu yes                            # activate menu
# zstyle ':completion:*:history-words'                remove-all-dups yes                 # ignore duplicate entries
# zstyle ':completion:*:history-words'                stop yes                            #
# # zstyle ':completion:*'                              matcher-list 'm:{a-z}={A-Z}'        # match uppercase from lowercase
# # zstyle ':completion:*:matches'                      group 'yes'                         # separate matches into groups
# zstyle ':completion:*'                              group-name ''
# # if [[ -z "$NOMENU" ]] ; then
# #   zstyle ':completion:*'                            menu select=2                       # if there are more than 5 options allow selecting from a menu
# # else
# #   setopt no_auto_menu # don't use any menus at all
# # fi
# # zstyle -e ':completion:*'                           special-dirs '[[ $PREFIX = (../)#(|.|..) ]] && reply=(..)'
# zstyle ':completion:*:processes'                    command 'ps -au$USER'               # on processes completion complete all user processes
# zstyle ':completion:*:*:-subscript-:*'              tag-order indexes parameters        # offer indexes before parameters in subscripts
# zstyle ':completion:*'                              verbose true                        # provide verbose completion information
# zstyle ':completion:*:*:zcompile:*'                 ignored-patterns '(*~|*.zwc)'       # define files to ignore for zcompile
# zstyle ':completion:correct:'                       prompt 'correct to: %e'             #
# zstyle ':completion::(^approximate*):*:functions'   ignored-patterns '_*'    # Ignore completion functions for commands you don't have:
# #
# # complete manual by their section
# zstyle ':completion:*:manuals'                      separate-sections true
# zstyle ':completion:*:manuals.*'                    insert-sections   true
# zstyle ':completion:*:man:*'                        menu yes select
#
# # correction
# # run rehash on completion so new installed program are found automatically:
# _force_rehash() {
#   (( CURRENT == 1 )) && rehash
#   return 1 # Because we didn't really complete anything
# }
# #
# # # some people don't like the automatic correction - so run 'NOCOR=1 zsh' to deactivate it
# # if [[ -n "$NOCOR" ]] ; then
# #   zstyle ':completion:*'                            completer _oldlist _expand _force_rehash _complete _files
# #   setopt nocorrect # do not try to correct the spelling if possible
# # else
# #   #    zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _correct _approximate _files
# #   setopt correct  # try to correct the spelling if possible
# #   zstyle -e ':completion:*'                         completer '
# #   if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]]; then
# #     _last_try="$HISTNO$BUFFER$CURSOR"
# #     reply=(_complete _match _prefix _files)
# #   else
# #     if [[ $words[1] = (rm|mv) ]]; then
# #       reply=(_complete _files)
# #     else
# #       reply=(_oldlist _expand _force_rehash _complete _correct _approximate _files)
# #     fi
# #   fi'
# # fi
# #
# # # command for process lists, the local web server details and host completion
# # zstyle ':completion:*:urls'                         local 'www' '/var/www/' 'public_html'
# #   
# # # caching
# # [ -d $ZSHDIR/cache ] && zstyle ':completion:*'      use-cache yes && \
# #   zstyle ':completion::complete:*'                  cache-path $ZSHDIR/cache/
# #
# # # # host completion /* add brackets as vim can't parse zsh's complex cmdlines 8-) {{{ */
# # # [ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
# # # [ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()
# # #
# # # hosts=(`$hostname` "$_ssh_hosts[@]" "$_etc_hosts[@]" localhost)
# # # zstyle ':completion:*:hosts'                        hosts $hosts
#
bindkey '\t' menu-select "$terminfo[kcbt]" menu-select
bindkey -M menuselect '\t' menu-complete "$terminfo[kcbt]" reverse-menu-complete
