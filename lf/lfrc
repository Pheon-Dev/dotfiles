set previewer ~/.config/lf/lf-preview
set cleaner ~/.config/lf/lf-clean

# Basic Settings
set hidden true
set ignorecase true
set icons true

# Custom Functions
cmd create_dir ${{
  echo -e ""
  echo -n "$(tput setaf 3) Enter Directory Name  :"
  echo -n "$(tput setaf 4) "
  read dirs
  for dir in $dirs; do
    mkdir -p $dir
  done
  clear
}}

cmd create_file ${{
  echo -e ""
  echo -n "$(tput setaf 3) Enter File Name  :"
  echo -n "$(tput setaf 4) "
  read files
  for file in $files; do
    touch $file
  done
  clear
}}

cmd delete ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [[ "$files" ]]; do
    file=${files%%;*}

    del=$(basename "$file")
    echo -e ""
    echo -n "$(tput setaf 1)  Are you sure you want to delete"
    echo -n "$(tput setaf 3) $del"
    echo -n "$(tput setaf 1) [y|n] : "
  echo -n "$(tput setaf 4) "
    read res
    if [[ $res == "y" || $res == "Y" || $res == "yes" || $res == "Yes" ]]; then
      rm -rf $del
      clear
      return 127
    fi
    clear
    return 127 # nonzero retcode required for lf previews to reload
  done
}}

    # cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (exa --icons -T --color=always --group-directories-first {} || tree -C {})) || echo {} 2> /dev/null | head -200' --preview-window=top --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
          fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --disabled --query "$INITIAL_QUERY" \
            --delimiter : \
            --preview 'bat --color=always {1} --highlight-line {2}' \
            --preview-window top \
          | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    if [ -n "$res" ]; then
      [ -n "$res" ] && lf -remote "send $id select \"$res\""
    fi
}}

# Archive bindings
cmd unarchive ${{
  case $1 in
    *.tar.bz2)    tar xjf $1    ;;
    *.tar.gz)     tar xzf $1    ;;
    *.bz2)        bunzip2 $1    ;;
    *.rar)        unrar x $1    ;;
    *.gz)         gunzip $1     ;;
    *.tar)        tar xf $1     ;;
    *.tbz2)       tar xjf $1    ;;
    *.tgz)        tar xzf $1    ;;
    *.zip)        unzip $1      ;;
    *.Z)          uncompress $1 ;;
    *.7z)         7z x $1       ;;
    *.deb)        ar x $1       ;;
    *.tar.xz)     tar xf $1     ;;
    *.tar.zst)    unzstd $1     ;;
    *)            echo "'$1' cannot be extracted" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

# Bindings
map d
map m

map u unarchive

# Basic Functions
map . set hidden!
# map dd trash
# map dr restore_trash
map p paste
map f fzf_jump
map x cut
map y copy
map <enter> open
map R reload
map a create_file
map A create_dir
map dd delete
map C clear
map S fzf_search

# Movement
map gr cd ~/rust
map go cd ~/go
map gc cd ~/Documents
map gw cd ~/Downloads
map gf cd ~/.config
map gt cd ~/.local/share/Trash/files
