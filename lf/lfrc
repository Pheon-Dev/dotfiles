set previewer ~/.config/lf/lf-preview
set cleaner ~/.config/lf/lf-clean

set period 1
#set relativenumber
#set number
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set promptfmt "
\033[38;2;35;38;39;48;2;202;31;31m
\033[38;2;202;31;31;48;2;40;47;62m
\033[38;2;255;255;255m %w
\033[38;2;40;47;62;48;2;58;67;89m
\033[38;2;255;255;255m %f
\033[;38;2;58;67;89;49m\033[m"
set incsearch
set incfilter
#set globsearch on
set truncatechar "…"
set waitmsg "\033[1;31m⏎\033[m"
set timefmt "02/01/2006 15:04:05 "
set infotimefmtnew '02/01 15:04'
set infotimefmtold '02/01/06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"
set dircounts
set tabstop 4
set scrolloff 5
set wrapscroll
set shellopts '-eu'
set shell "zsh"
set ruler 'df:acc:progress:selection:filter:ind'
set cursorpreviewfmt "\033[7m"
# Basic Settings
set hidden true
set ignorecase true
set icons true
# set cursorpreviewfmt "\033[7;90m"
set drawbox false
# set nohidden
set info size
# set scrolloff 99
set ifs "\n"
set filesep "\n"
set errorfmt "\033[31m%s\033[0m"
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case "$(file --mime-type "$f" -b)" in
        text/*) nvim --server ~/.cache/nvim/server.pipe --remote $fx;;
        audio/*) mpv --audio-display=no $f ;;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}
${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    # elif [ $w -le 160 ]; then
        # lf -remote "send $id set ratios 1:2:3"
    else
    #     lf -remote "send $id set ratios 1:2:3:4"
        lf -remote "send $id set ratios 1:2:3"
    fi
}}

cmd create_dir ${{
  clear
  echo -e ""
  echo -n "$(tput setaf 3) Enter Directory Name  :"
  echo -n "$(tput setaf 4) "
  read dirs
  for dir in $dirs; do
    mkdir -p $dir
  done
  clear
}}

cmd create_file ${{
  clear
  echo -e ""
  echo -n "$(tput setaf 3) Enter File Name  :"
  echo -n "$(tput setaf 4) "
  read files
  for file in $files; do
    touch $file
  done
  clear
}}

cmd delete ${{
  clear
  files=$(printf "$fx" | tr '\n' ';')
  while [[ "$files" ]]; do
    file=${files%%;*}

    del=$(basename "$file")
    echo -e ""
    echo -n "$(tput setaf 1)  Are you sure you want to delete"
    echo -n "$(tput setaf 3) $del"
    echo -n "$(tput setaf 1) [y|n] : "
    echo -n "$(tput setaf 4) "
    read res
    if [[ $res == "y" || $res == "Y" || $res == "yes" || $res == "Yes" ]]; then
      rm -rf $del
      clear
      return 127
    fi
    clear
    return 127 # nonzero retcode required for lf previews to reload
  done
}}

cmd chmodx &{{
	chmod u+x $fx
	lf -remote "send $id reload"
}}

cmd edit ${{
  clear
  files=$(printf "$fx" | tr '\n' ';')
  nvim --server ~/.cache/nvim/server.pipe --remote $files
}}

cmd fzf_jump ${{
  res="$(\
    fd -H \
      --strip-cwd-prefix \
      --follow \
      --exclude {$IGNORE} \
        | fzf \
          --bind 'ctrl-l:accept' \
          --border 'none'
  )"
  if [ -n "$res" ]; then
      if [ -d "$res" ]; then
          cmd="cd"
      else
          cmd="select"
      fi
      res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
      lf -remote "send $id $cmd \"$res\""
  fi
}}

cmd fzf_search ${{
  RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
  res="$(
    FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
      fzf --bind "change:reload:$RG_PREFIX {q} || true" \
        --disabled --query "$INITIAL_QUERY" \
        --bind 'ctrl-l:accept' \
        --border 'none' \
        --preview 'bat style=plain --color=always {1} --highlight-line {2}' \
      | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
  )"
  if [ -n "$res" ]; then
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
  fi
}}

# Archive bindings
cmd unarchive ${{
  case $1 in
    *.tar.bz2)    tar xjf $1    ;;
    *.tar.gz)     tar xzf $1    ;;
    *.bz2)        bunzip2 $1    ;;
    *.rar)        unrar x $1    ;;
    *.gz)         gunzip $1     ;;
    *.tar)        tar xf $1     ;;
    *.tbz2)       tar xjf $1    ;;
    *.tgz)        tar xzf $1    ;;
    *.zip)        unzip $1      ;;
    *.Z)          uncompress $1 ;;
    *.7z)         7z x $1       ;;
    *.deb)        ar x $1       ;;
    *.tar.xz)     tar xf $1     ;;
    *.tar.zst)    unzstd $1     ;;
    *)            echo "'$1' cannot be extracted" ;;
  esac
}}

cmd edit-config ${{
  clear
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

map B broot_jump

# Dragon
cmd dragon %~/Documents/dragon/dragon -a -x $fx
cmd dragon-stay %~/Documents/dragon/dragon -a $fx
cmd dragon-individual %~/Documents/dragon/dragon $fx
# cmd cpdragon %cpdragon
# cmd mvdragon %mvdragon
# cmd dlfile %dlfile
map drr dragon
map drs dragon
map dri dragon

# cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | wl-copy

# Bindings
map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open
map d
map m
map u unarchive

# Basic Functions
map . set hidden!
map p paste
map P paste-async
map / fzf_jump
map x cut
map X chmodx
map y copy
map Y yank-path
map <enter> open
map R reload
map a create_file
map A create_dir
map D delete
map C edit-config
map e edit
map S fzf_search
map Z $lazygit
map i $~/.config/lf/lf-preview $f | less -R

# Movement
map grr cd ~/rust
map grm cd ~/rust/canvas/manta-api

map goo cd ~/go
map gof cd ~/go/src/github.com/Pheon-Dev/flamingo
map goz cd ~/go/src/github.com/Pheon-Dev/zebra

map gdc cd ~/Documents
map gdw cd ~/Downloads

map gfg cd ~/.config
map gfj cd ~/.config/zellij
map gff cd ~/.config/flamingo
map gfa cd ~/.config/alacritty
map gfd cd ~/.config/dwm
map gfz cd ~/.config/zsh
map gfl cd ~/.config/lf
map gfn cd ~/.config/nvim
map gfb cd ~/.config/broot
map gfo cd ~/.config/dotfiles
map gfs cd ~/.config/starship
map gfk cd ~/.config/kitty
map gfw cd ~/.config/waybar
map gfh cd ~/.config/hypr

map glz cd ~/.local/share/nvim/lazy
map gls cd ~/.local/state/nvim/swap

map gcn cd ~/.cache/nvim

